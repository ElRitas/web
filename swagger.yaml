openapi: 3.0.3
info:
  title: Parking Reservation API
  description: API для системы бронирования парковочных мест
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api/v2.example.com
    description: Production server

paths:
  /api/v2/checkpoints:
    get:
      tags:
        - Checkpoint
      summary: Список всех КПП
      description: Получение списка всех КПП для текущего ЖК
      responses:
        '200':
          description: Список КПП успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkpoints:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: ID КПП
                          example: "checkpoint_1"
                        number:
                          type: string
                          description: Номер КПП
                          example: "1А"
                        status:
                          type: string
                          description: Статус активности КПП
                          example: "ACTIVE"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/checkpoints/{id}/pass/:
    post:
      tags:
        - Checkpoint
      summary: Проход через КПП
      description: Проверка и регистрация прохода через контрольно-пропускной пункт
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fio
              properties:
                fio:
                  type: string
                  description: ФИО человека
                  example: "Иванов Иван Иванович"
      responses:
        '200':
          description: Результат проверки прохода
          content:
            application/json:
              schema:
                type: object
                properties:
                  passed:
                    type: boolean
                    description: Результат проверки (true/false)
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/slots:
    get:
      tags:
        - Slot
      summary: Список всех мест
      description: Получение списка всех парковочных мест для текущего ЖК
      responses:
        '200':
          description: Список мест успешно получен
          content:
            application/json:
              schema:
                type: object
                properties:
                  slots:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: ID места
                          example: "slot_1"
                        number:
                          type: integer
                          description: Номер места
                          example: 52
                        status:
                          type: string
                          description: Статус места (занято или нет)
                          example: "FREE"
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Slot
      summary: Добавление нового места
      description: Добавление нового парковочного места
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - residentialId
                - slotNumber
              properties:
                residentialId:
                  type: string
                  description: ID жилого комплекса
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                slotNumber:
                  type: integer
                  description: "Номер парковочного места"
                  example: 52
      responses:
        '201':
          description: Место успешно добавлено
          content:
            application/json:
              schema:
                type: object
                properties:
                  slotId:
                    type: string
                    description: ID места
                    example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/reservations/:
    post:
      tags:
        - Reservation
      summary: Создать бронирование
      description: Создание нового бронирования парковочного места
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - residential
                - number
                - transportId
              properties:
                residential:
                  type: string
                  description: Жилой комплекс
                  example: "ЖК anus"
                number:
                  type: integer
                  description: Номер парковочного места
                  example: 67
                transportId:
                  type: string
                  description: ID транспорта
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
      responses:
        '200':
          description: Бронирование успешно создано
          content:
            text/plain:
              schema:
                type: string
                example: "Reservation created"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Reservation
      summary: Получить список всех броней
      description: Получить список всех броней мест для одного ЖК
      responses:
        '200':
          description: Статус успешно изменен
          content:
            text/plain:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      type: object
                      required:
                        - residential
                        - number
                        - transportNumber
                        - transportModel
                      properties:
                        residential:
                          type: string
                          description: Жилой комплекс
                          example: "ЖК Центральный"
                        number:
                          type: integer
                          description: Номер парковочного места
                          example: 25
                        transportNumber:
                          type: string
                          description: Номер транспортного средства
                          example: "А123БВ78"
                        transportModel:
                          type: string
                          description: Модель транспортного средства
                          example: "Toyota Camry"
        '404':
          description: Брони не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Reservation
      summary: Отменить бронирование
      description: Отмена существующего бронирования
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - number
                - model
              properties:
                number:
                  type: string
                  description: Номер транспортного средства
                  example: "А123БВ78"
                model:
                  type: string
                  description: Модель транспортного средства
                  example: "Toyota Camry"
      responses:
        '200':
          description: Бронирование успешно отменено
          content:
            text/plain:
              schema:
                type: string
                example: "Reservation cancelled"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/reservations/{id}/status:
    patch:
      tags:
        - Reservation
      summary: Изменить статус бронирования
      description: Изменение статуса бронирования парковочного места (активно/заморожено)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  description: Статус парковочного места
                  example: "FROZEN"
      responses:
        '200':
          description: Статус успешно изменен
          content:
            text/plain:
              schema:
                type: string
                example: "Reservation status changed"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/transport/:
    post:
      tags:
        - Transport
      summary: Добавить транспортное средство
      description: Добавление нового транспортного средства для пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - number
                - model
                - color
                - insurance
              properties:
                userId:
                  type: string
                  description: ID пользователя
                  example: "user_123"
                number:
                  type: string
                  description: Номер транспортного средства
                  example: "А123БВ78"
                model:
                  type: string
                  description: Модель транспортного средства
                  example: "Toyota Camry"
                color:
                  type: string
                  description: Цвет транспортного средства
                  example: "Красный"
                insurance:
                  type: boolean
                  description: Наличие страховки
                  example: true
      responses:
        '200':
          description: Транспортное средство успешно добавлено
          content:
            text/plain:
              schema:
                type: string
                example: "Transport added"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v2/transport/{id}:
    get:
      tags:
        - Transport
      summary: Получить информацию о транспортном средстве
      description: Получение информации о транспортном средстве по номеру и модели
      parameters:
        - name: number
          in: query
          required: true
          schema:
            type: string
          description: Номер транспортного средства
          example: "А123БВ78"
        - name: model
          in: query
          required: true
          schema:
            type: string
          description: Модель транспортного средства
          example: "Toyota Camry"
      responses:
        '200':
          description: Информация о транспортном средстве
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transport'
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Транспортное средство не найдено
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Transport
      summary: Удаление транспортного средства
      description: Удаление транспортного средства
      responses:
        '204':
            description: Транспорт успешно удален
            content:
              application/json:
                schema:
                  type: string
                  example: "Транспорт удален"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/users/register:
    post:
      tags:
        - User
      summary: Регистрация пользователя
      description: Регистрация нового пользователя в системе
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - address
              properties:
                name:
                  type: string
                  description: ФИО пользователя
                  example: "Иванов Иван Иванович"
                email:
                  type: string
                  format: email
                  description: Email пользователя
                  example: "ivanov@example.com"
                password:
                  type: string
                  format: password
                  description: Пароль пользователя
                  example: "securepassword123"
                address:
                  type: string
                  description: Адрес проживания
                  example: "ул. Ленина, д. 1, кв. 5"
      responses:
        '200':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    description: JWT токен
                    example: "jwt"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка регистрации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/users/guest:
    post:
      tags:
        - User
      summary: Добавить гостя
      description: Добавление гостя в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fio
                - email
                - password
                - userId
              properties:
                fio:
                  type: string
                  description: ФИО
                  example: "Иванов Иван Иванович"
                email:
                  type: string
                  description: Адрес электронной почты
                  example: "test@test.ru"
                password:
                  type: string
                  description: Пароль
                  example: "12345678"
                userId:
                  type: string
                  description: ID пользователя который добавил
                  example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"

      responses:
        '200':
          description: Гость успешно добавлен
          content:
            text/plain:
              schema:
                type: string
                example: "Guest added"
        '500':
          description: Ошибка добавления гостя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v2/users/authorize:
    post:
      tags:
        - User
      summary: Авторизация пользователя
      description: Авторизация пользователя по email и паролю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email пользователя
                  example: "ivanov@example.com"
                password:
                  type: string
                  format: password
                  description: Пароль пользователя
                  example: "securepassword123"
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    description: JWT токен
                    example: "jwt"
        '400':
          description: Неверные параметры запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неверные учетные данные
        '500':
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
components:
  schemas:
    User:
      type: object
      properties:
        fio:
          type: string
          description: ФИО пользователя
        email:
          type: string
          format: email
          description: Email пользователя
        password:
          type: string
          format: password
          description: Пароль пользователя
        residentialId:
          type: string
          description: ID жилого комплекса
        role:
          type: string
          enum: [RESIDENT, GUEST, ADMIN]
          description: Роль пользователя

    Transport:
      type: object
      properties:
        number:
          type: string
          description: Номер транспортного средства
        model:
          type: string
          description: Модель транспортного средства
        color:
          type: string
          description: Цвет транспортного средства
        insurance:
          type: boolean
          description: Наличие страховки

    Error:
      type: object
      properties:
        error:
          type: string
          description: Сообщение об ошибке
        code:
          type: integer
          description: Код ошибки

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []